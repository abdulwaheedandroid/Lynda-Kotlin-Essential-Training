String tricks and traps
- [Instructor] Text processing is one of the primary duties of computer applications. Strings in Kotlin, like most modern languages are featured pack. Let's explore them. We create strings like creating other types and again, specifying the data type is optional. So let's create a string. We're going to say val greeting colon string equals hello there and let's create one more variable, not a string and we're going to say owe equals 50. We can use templates and strings to display the value of a variable or a Kotlin expression. Place the variable inside of a double quotes with a dollar sign in front of it. For more complicated items, surround them with curly braces. Don't go crazy with templates, though. Having too much code in a string makes them hard to read. Consider pulling the expression out and assigning it to a variable. So now we're going to say, create another string. And we're going to call this string Janet, and it's going to equal, double quotes, I owe Janet back slash dollar sign. And that is how you print a dollar sign in a string, and then I'm going to say, dollar sign owe dollars. And then we'll print that out. We can render both ASCII and Unicode characters and strings with back slash escape sequences, so let's say val infinity equals the infinity symbol, is back slash u, two, two, one, E and print that out. Strings have a large number of functions, properties and extensions. The simplest is the length property which returns the size of the string. So print line, we got double quotes and then we have square brackets and inside of that we're going to say dollar sign greeting, is dollar sign, open curly brace, greeting dot length and space and characters long. We can retrieve the character at a specific index with the get function. It is an exception if the index is out of bounce so be careful. Indexing is preferred and offers identical results with a more concise syntax. So we say var bad equals greeting dot get two and val letter equals greeting then we're going to do an index of one. We can compare two strings with the compare to method. The return integer is zero if the two strings are equal, a positive number if the first string is greater or a negative value if it is lesser. So we say val compare one equals beta. Let's move up the screen just a little bit. Val compare two equals alpha and print line, dollar sign, curly braces, compare one dot compare two. And then inside of the parenthesis we put compare two. The subSequence function allows us to retrieve part of a string. This method always creates a new string, even if it is empty or only has one character. So we say val sub, equals greetings dot subSequence and we're going to say six comma nine and do a print line, double quotes, sub equals dollar sign sub. Because strings are iterable objects, we can use them in loops. We haven't covered loops yet but here is how we can print out each character one at a time so we say for, single in, greeting, open curly brace, then we're going to do a print. And in the print, we're going to do a double quotes, dollar sign, single and the space. If we need our string to be multiple lines long and it include characters like the line feed, we can create a raw string. Raw strings are wrapped with triple quotes. When printed, they display everything between the triple quotes. So we're going to say val myString equals, one two three, triple quotes, I'm going to get rid of the trim indent and we're going to say that Kotlin is fun and Kotlin is pragmatic. Then we're going to do a print line and myString. Now let's run the code and we find out that I owe Janet 50 dollars. The infinity symbol, that there are 11 characters in hello there. That character six through nine of hello there are the. Here is hello there one character at a time with a space in between and here is our raw string. String manipulation is often the source of performance memory issues in programs. Kotlin strings like those in Java and other languages are immutable. This time our explanation of immutable is somewhat different than it was for variables. Kotlin never changes the memory allocated to a string. Instead, it creates a new strings. If you're doing a lot of memory manipulation, you should look at the string builder class and the official documentation. This class does highly optimized string manipulation. Hopefully, this section has shown you some of the cool stuff we can do with strings in Kotlin. Please check out the Kotlin documentation to discover more.