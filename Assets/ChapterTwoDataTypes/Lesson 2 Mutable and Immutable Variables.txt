Mutable and immutable variables
- [Instructor] Immutable data is a concept who's popularity has grown explosively in the past few years. If you happen to be a programmer of a functional language, like Lisp, Closure, or F#, you are probably wondering what took the rest of us so long to get to the party and that we haven't gone far enough. Earlier in this course, we said that Kotlin has two types of variables, val and var. We also added that val is preferred and considered a best practice, but we didn't explain why. Now is time for an explanation of immutable variables and three reasons why you want them. One, legible code. The first benefit of immutable variables is that they help make your program more legible and comprehendible. I think of keeping track of variables like juggling. I know it sounds a bit silly, but stick with me. When juggling, I need to keep track of each ball, where it is, and where it is going. With variables, I need to know who creates it, who can read it, and who can modify it. Bugs in code aren't usually caused by creating or reading variables, they're caused by changing them. Every variable that can change increases the complexity of your program, just like adding a ball increases the challenge of juggling. Using immutable variables makes your code more straightforward and easier to understand. Two, testable code. Immutable variables are one of several techniques that can help make your application easier to test. Others include writing peer functions, using single purpose classes, and minimizing state changing. Covering them is out of the scope for this course. If you'd like to know more, you can check out the course Software Design Code and Design Smells by Harrison Farone on LinkedIn Learning. Three, thread-safe code. Perhaps the most significant benefit, one which will aid you the most as you grow your Kotlin confidence, is thread-safety. One of the big problems in multi-threaded code is when a variable you are working with gets changed underneath you by another thread. Finding and resolving this issue is extremely difficult. It is far better not to have the problem in the first place. Immutable variables can't change, so that is one less thing you have to worry about as you make your app thread-safe.